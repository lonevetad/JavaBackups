Note sul parser

utilizzare il package "expression evaluer" e affini per creare il codice che dovrebbe essere eseguito dalle abilita'

L'idea e' creare una struttura ad "albero" in cui si eseguono i vari passi dell'abilita'.
I nodi a pari livello di profondita' sono delle azioni alternative, in mutua esclusione,
per esempio: "Puoi rivelare una carta dalla tua mano. Se lo fai, pesca una carta, altrimenti guadagna 3 punti vita"
Considerando che ogni azione (tranne l'ultima della lista, a breve spiego perche') ha una (opzionale) precondizione da soddisfare,
allora l'esempio sarebbe traducibile in
[]null: Scegli se rivelare una carta ->
	[]se ha rivelato	: pesca
	[]null				: guadagna 3 punti vita

l'ultima azione della lista puo' avere la precondizione nulla perche' o e' l'ultima delle alternative possibili
(corrispondenti al "ramo else" di vari "if") oppure non ha precondizioni, del tipo:
"R, T: Infliggi 1 danno a qualunque bersaglio". Oppure "T: Guadagna 2 punti vita."

Ne consegue che una sequenza di azioni è una "lista linkata", ossia un "albero profondo con solo un nodo per livello",
per esempio "costo: TAPpa una creatura bersaglio controllata da un avversario bersaglio. Il proprietario riprende in mano una creatura bersaglio che non controlli. Pesca una carta"


Grammatica per le abilità attivate

v1:
S -> Costs ":" EffectList
Costs -> SingleCost (epsilon | Costs)
SingleCost -> Manacost | SacrificeCost | TapCost | ...and so on
EffectList -> SingleEffect (epsilon | EffectList)
SingleEffect -> Effect | EffectFilter Effect
EffectFilter -> some expression like "X greater than N , X is count of life" or "X equals to 5, X is count of colors among Filter, Filter is Permanent and Controlled and Creature", "for each Targets"
Effect -> "TAP target", "draw N cards", "discard N cards", "gain X life", "deals X damage", "destroy", "sacrifice", "mill", etc etc
ricopiato in
AbilityParser

possono essere incluse parti "in mezzo" come operatori quali "for each", "at least", "at most", "one, two or three target", etc



Ottenuto quindi l'albero di costi/condizioni ed effetti/azioni, di tale albero ed i suoi nodi se ne dovra' fare qualcosa:
- to executible code
- to string (stampa i token)
- toStringPrintableClass (ossia toCode spiegato sopra e poi il relativo toString)
- altro

+ toCode?
L'albero altro non e' che un "albero di parsificazione, che ha soltanto le informazioni per rappresentare l'abilita',
ma non e' eseguibile, perche' e' equivalente ad un concetto che si ha nella mente.
La vera e propria esecuzione e' la conversione in codice.
Per esempio, un filtro e' un Predicate, un operatore del tipo "per ogni creatura (che controlli, metti un segnalino +1/+1)"
e' un forEach su una struttura dati ottenuta da una precedente selezione ed invocazione di un metodo, lambda expression, etc

+ toString e toStringPrintableClass?
Una data, n-esima, abilita' puo' essere stampata in due modi:
- come semplice albero di nodi di parsificazione
- come codice, una vera e propria classe implementata, compilabile e poi eseguibile .. una sorta di pseudo-compilazione GrammaticaAbilita' -> Java
con il primo metodo si salvano le abilita' da qualche parte (file, database, etc)
con il secondo si produce una abilita' eseguibile ed includibile nel codice del gioco stesso
