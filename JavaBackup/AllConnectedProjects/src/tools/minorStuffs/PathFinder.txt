package tools;

import java.awt.geom.Rectangle2D;
import java.io.Serializable;
import java.util.ArrayList;

/**
 * Idea : prendo una matrice, la suddivido ricorsivamente in quadrati
 */
public class PathFinder {

	public PathFinder() {
		// TODO Auto-generated constructor stub
	}

	public static final int MINIMUM_SQUARE_DIMENSION = 4, MAXIMUM_SQUARE_DIMENSION = 128,
			INDEX_ARRAY_ArrayListRectangles2D_ONLYTRANSPARENT_RECTANGLE = 0,
			INDEX_ARRAY_ArrayListRectangles2D_OPAQUEANDMIX_RECTANGLE = 1;

	/**
	 * Indexes:
	 * <ul>
	 * <li>0 : only white rect</li>
	 * <li>black and mixed white-black rect</li>
	 * </ul>
	 */
	public static ArrayListRectangles2D[] disassembleIntoSquares(int[][] m, int precision) {
		ArrayListRectangles2D ret[] = null, t;
		if (precision < MINIMUM_SQUARE_DIMENSION) {
			precision = MINIMUM_SQUARE_DIMENSION;
		} else if (precision > MAXIMUM_SQUARE_DIMENSION) {
			precision = MAXIMUM_SQUARE_DIMENSION;
		}
		if (m != null && BufferedImageBoundingPolygon.isTheMatrixRectangular(m)) {
			int matrixWidth = m[0].length, r, c, h = m.length, dim;
			int mcd = MCD(m.length, matrixWidth);
			RectList rlFullyWhite, rlBlackOrMix;
			Rectangle2D fullyWhiteRect[], blackMixRect[];
			System.out.println("MATRIX w : " + matrixWidth + " __h : " + h + " __mcd : " + mcd);
			if (mcd >= precision) {
				// h = m.length / mcd;
				// w /= mcd;
				dim = mcd;
			} else {
				// riassegnare mcd;

				/*
				 * devo trovare il fattore primo minimo di entrambe le
				 * dimensioni, poi ingrandirle fino a diventare un multiplo del
				 * f.p. dell'altra dimensione ... per un teorema di un greco, al
				 * fine di vedere se è un numero primo è sufficiente muoversi
				 * tra 2 e la metà di tale numero (anche se in realtà delle
				 * ottimizzazioni ideali sarebbero tra 2 e la radice quadrata, o
				 * cubica, o ecc...)
				 */
				int[] row, newRow, mat[];
				int neww, newh;
				/*
				 * int fattorePrimoAlt = 2, fattorePrimolagh = 2, h_2, w_2; h_2
				 * = h >>> 1; w_2 = w >>> 1;
				 * 
				 * while (fattorePrimoAlt < h_2 && h % fattorePrimoAlt != 0) {
				 * fattorePrimoAlt++; } if (fattorePrimoAlt == h_2) { // è un
				 * numero primo, quindi creo un numero non primo //
				 * fattorePrimoAlt = h; }
				 * 
				 * while (fattorePrimolagh < w_2 && w % fattorePrimolagh != 0) {
				 * fattorePrimolagh++; } if (fattorePrimolagh == w_2) {
				 * fattorePrimolagh = w; } // ora faccio crescere le
				 * dimensioniice
				 * 
				 * // copio la matr if (w < h) { // t = (h - (h % w)) + w;//
				 * alzo la tabella r = -1; // ricopio la tabella // mat = new
				 * int[t][w]; while (++r < h) {
				 * 
				 * c = -1; row = m[r]; while (++c < r) {
				 * 
				 * } } }
				 * 
				 * // BAAAAAHHH return null;
				 */

				dim = 64;// arbitrario
				{
					int te = (dim - (matrixWidth % dim));
					neww = matrixWidth + te;
					newh = matrixWidth + te;
				}
				r = -1;
				mat = new int[newh][];
				while (++r < h) {

					c = -1;
					row = m[r];
					mat[r] = newRow = new int[neww];
					while (++c < r) {
						newRow[c] = row[c];
					}
				}
				m = mat;
				matrixWidth = neww;
				h = newh;
			}
			rlFullyWhite = new RectList();
			rlBlackOrMix = new RectList();
			System.out
					.println("matrixWidth : " + matrixWidth + " __h : " + h + " __mcd : " + mcd + " ___  dim: " + dim);
			System.out.println("start suddivisione");
			r = 0;
			do {
				c = 0;// vedi dopo
				do {
					// rect = new Rectangle2D.Float(r, c, dim, dim);
					// System.out.println("eseguo metodo in .. r: " + r + " __
					// c: " + c);
					disassembleIntoRectangles(m, c, r, dim, rlFullyWhite, rlBlackOrMix, matrixWidth, precision);
					// metti ciclo interno
				} while ((c += dim) < matrixWidth);
			} while ((r += dim) < h);

			System.out.println("fine suddivisione, conversione in arrays di rettangoli suddivisi");

			// TODO to-do UNIRE I QUADRATI ADIACENTI E DELLO STESSO TIPO

			// use
			ret = new ArrayListRectangles2D[2];
			fullyWhiteRect = rlFullyWhite.toArray();
			blackMixRect = rlBlackOrMix.toArray();
			// recicle mcd
			mcd = -1;
			t = ret[INDEX_ARRAY_ArrayListRectangles2D_ONLYTRANSPARENT_RECTANGLE] = new ArrayListRectangles2D(
					fullyWhiteRect.length);
			while (++mcd < fullyWhiteRect.length) {
				t.al.add(fullyWhiteRect[mcd]);
			}
			mcd = -1;
			t = ret[INDEX_ARRAY_ArrayListRectangles2D_OPAQUEANDMIX_RECTANGLE] = new ArrayListRectangles2D(
					blackMixRect.length);
			while (++mcd < blackMixRect.length) {
				t.al.add(blackMixRect[mcd]);
			}
			// to be continued
		}
		return ret;
	}

	// ricorsivo
	private static void disassembleIntoRectangles(int[][] m, int x, int y, int l, RectList listOnlyTransparent,
			RectList listOpaqueMix, int matrixWidth, int precision) {
		if (y < m.length && x < matrixWidth) {
			// int cs =
			switch (coloredState(m, x, y, l)) {
				case (1): {
					listOnlyTransparent.add(new Rectangle2D.Float(x, y, l, l));
					// only transparent
					break;
				}
				case (0): {
					// only opaque
					listOpaqueMix.add(new Rectangle2D.Float(x, y, l, l));
					break;
				}
				case (-2): // non so come altro fare, per ora
				case (-1): {
					int hl = l >>> 1, xx = x + hl, yy = y + hl;
					// molta ricorsioneeeee
					if (l >= precision) {
						disassembleIntoRectangles(m, x, y, hl, listOnlyTransparent, listOpaqueMix, matrixWidth,
								precision);
						disassembleIntoRectangles(m, xx, y, hl, listOnlyTransparent, listOpaqueMix, matrixWidth,
								precision);
						disassembleIntoRectangles(m, x, yy, hl, listOnlyTransparent, listOpaqueMix, matrixWidth,
								precision);
						disassembleIntoRectangles(m, xx, yy, hl, listOnlyTransparent, listOpaqueMix, matrixWidth,
								precision);
					} else {
						// aggiungo opacitamente
						listOpaqueMix.add(new Rectangle2D.Float(x, y, l, l));
					}
				}
			}
		}
	}

	/**
	 * @return
	 * 		<ul>
	 *         <li>1 if the given square is only transparent</li>
	 *         <li>0 if the given square is only opaque</li>
	 *         <li>-1 if the given square is partially transparent and partially
	 *         opaque</li>
	 *         <li>-2 if the matrix is NULL or the given square is OUT OF BOUNDS
	 *         </li>
	 *         </ul>
	 * 
	 */
	public static int coloredState(int[][] m, int x, int y, int l) {
		int maxr, maxc;
		if (m != null && x >= 0 && y >= 0 && l > 0 && ((maxr = y + l) <= m.length)
				&& (((maxc = x + l) <= m[y].length))) {
			boolean trasparentNotFound = true, opaqueNotFound = true;
			int r, c, state;
			r = -1;
			do {
				c = -1;
				maxr--;
				do {
					state = BufferedImageBoundingPolygon.isTrasparent(m, --maxc, maxr);
					if (state == -1) {
						return -2;
					}
					if (trasparentNotFound) {
						trasparentNotFound = state == 0;
					}
					if (opaqueNotFound) {
						opaqueNotFound = state == 1;
					}
				} while ((trasparentNotFound || opaqueNotFound) && (++c < l));
				maxc = x + l;
			} while ((trasparentNotFound || opaqueNotFound) && (++r < l));
			/**
			 * OTTIMIZZO // <br>
			 * if (trasparentNotFound ^ opaqueNotFound) { // <br>
			 * // XOR :D // <br>
			 * return trasparentNotFound ? 0 : 1; // <br>
			 * } else { // <br>
			 * // a questo punto saranno tutti falsi (se il primo if è stato
			 * fatto bene), quindi seguo il commento, perchè ho sia trasparenti
			 * che opachi // <br>
			 * return -1; // <br>
			 * }
			 */
			return (trasparentNotFound ^ opaqueNotFound) ? (trasparentNotFound ? 0 : 1) : -1;
		} else {
			System.out.println("SONO NELL?ELSE : x: " + x + "__y: " + y + "__l: " + l);
		}
		return -2;
	}

	public static GraphCross extractGraphCross(ArrayListRectangles2D[] arrays) {
		ArrayListRectangles2D trasp, opaque;
		return null;
	}

	public static int MCD(int a, int b) {
		if (a == 0 && b == 0) {
			return Integer.MIN_VALUE;
		}
		if (a != b) {
			int c;
			while (b != 0) {
				c = a;
				a = b;
				b = (c % b);
			}
		}
		return a;
	}

	private static final class GraphCross implements Serializable {

		private static final long serialVersionUID = 84089540047840L;

		GraphNode start;
		int size = 0;

		class GraphNode {
			GraphNode dx, giu, sx, su;
			int x, y;
		}
	}

	//

	public static class ArrayListRectangles2D implements Serializable {
		private static final long serialVersionUID = 840980303047198989L;

		ArrayListRectangles2D(int n) {
			al = new ArrayList<Rectangle2D>(n);
		}

		ArrayList<Rectangle2D> al;
	}
	//

	private static final class RectList implements Serializable {

		private static final long serialVersionUID = 560149840847963736L;
		Node sentinel, tail;
		int size;

		RectList() {
			tail = sentinel = new Node(null, null);//
			size = 0;
		}

		void add(Rectangle2D r) {
			tail = add(r, tail);
		}

		Node add(Rectangle2D p, Node prev) {
			size++;
			return new Node(p, prev);
		}

		class Node {
			Node next;// , prev;
			// int x, y;
			Rectangle2D r;

			Node(Rectangle2D r, Node prev) {
				this.r = r;
				// this.prev = prev;
				if (prev != null) {
					if (prev.next != null) {
						next = prev.next;
						// prev.next.prev = this;
					}
					prev.next = this;
				}
			}
		}

		Rectangle2D[] toArray() {
			Rectangle2D m[] = new Rectangle2D[size];// a, b;
			// a = m[0];
			// b = m[1];
			Node n = sentinel.next;
			int i = 0;
			while (n != null) {
				// a[i] = n.x;
				// b[i++] = n.y;
				m[i++] = n.r;
				n = n.next;
			}
			return m;
		}
	}
}