
30/11/2021

l' "estrattore di essenze", cioè l' NPC adibito ad estrarre gli "EquipmentUpgrades" dai pezzi di Equipaggiamento
per poi stoccarli nel EssenceStorage.
Le estrazioni ed applicazioni potrebbero essere implementate come singolarmente e/o come "bulk": "tutto o niente".
  Cioè, o si rimuovono TUTTI gli upgrade o nisba, ovviamente provvedendo abbastanza Storage idonei.
Gli EssenceStorage potrebbero avere dei livelli massimi di rarità di contenimento (ma è un ulteriore casino .. evitabile)
Si potrebbero implementare dei costi di estrazione ed applicazione:
- lineari sul numero di cose da estrarre / applicare
- il costo potrebbe invece dipendere linearmente dal "peso" complessivo dell'operazione, come segue:
- - la rarita' dell'Upgrade ha peso pari ad una funzione positiva monotona crescente applicata alla rarita' (es: il suo quadrato)
- - il peso totale di un "bulk" di estrazioni/applicazioni è la somma dei pesi individuali
- - il prezzo è quindi lineare alla somma dei pesi
- DISCOUNT:
  in caso di soppesazione delle rarità, si potrebbero applicare dei discount:
- - una funzione sigmoide che sconta fino al 50%, come "cap"

                  
50%                        ____|_____ fixed at 50% after 32
                      _--''
                    o'
                  ,/
25%               |
                 /'
                o'
              _-
00% ____---°°'
   0 1 2 3 4 6 8 16 24 30 31 32

proposte:
a) (50/(1+1.375^(-(x-16))))
b) 2+(49/(1+1.1875^(-(x-17)))
c) 1.75+(49/(1+1.1875^(-(x-17))))
best: c

TODO 28/05/2020
Il ISOM potrebbe essere formata da un insieme di sotto-isom-matrix, ciascuno avente una lista di adiacenza di altre matrix (inserite a mano)
tale ISOM-WRAPPER e' anch'esso un "point provider", esattamente come le sotto-matrici, con la differenza che la prima fa cose del tipo

public NodeIsom getAt(int x, int y){
	ISOM matrix = getMatrixHolding(x,y);
	return matrix.getAt(x,y);
}
Per fare RunShape sulla ISOM si fa
- dato il centro della Shape, identificare quale matrix M la contiene
- se la Shape ï¿½ interamente contenuta in M, allora eseguire il runner in tale M (ossia fornire al runner M come istanza di "point provider"
- altrimenti usare "this" come "point provider" da fornire al runner

TODO 10/05/2020
-) cambiare TRAn LoaderGeneric cosï¿½ che il JSON abbia un oggetto (il ProbabilityOfContextesHolders appunto)
	avente un array di oggetti: di coppie <nome, arraiDiProbabilita'> (ossia RandomWeightedIndexes)
-) utilizzare in modo decente questa mappa in GModalityTRAn




TODO:
aggiunto nel 27/04/2020
aggiungere metodo per il drop randomico degli oggetti (magari in parallelo e con un GThread a parte)




TODO:
aggiunto nel 20/04/2020

Le spell devono essere un po' personalizzabili ed un po' specifiche:
-) Tutti i personaggi possono fare tutto, ma inizialmente ogni personaggio ha un insieme di spell tipiche.
-) Infatti ogni Player ha tre insiemi:
- - quelle di default, fornite dalla propria classe di appartenenza (uno skill-tree, magari)
- - - es: gli elfi spareranno molte frecce, i maghi palle di fuoco, gli ogre dei buff agli attributi d'attacco, gli umani evocano altri umani, ec
- - quello di skill apprese (tramite libri e non solo), che possono essere TUTTE le magie esistenti, inizialmente quelle di cui sopra E sbloccate
- - quello di skill attualmente equipaggiae ed utilizzabili in battaglia

Il GameController dovrï¿½ poi definire i metodi di "caricamento dei salvataggi" (oltre a quello delle mappe)
tra cui caricare un Player, col suo livello, inventario, etc. Saranno necessari dei loader apposa

Definire poi gli altri CharacterType





TODO:
aggiunto nel 03/04/2020
aggiungere "edit distance" in Comparators come STRING_COMPARATOR_EDIT_DISTANCE






22/03/2020
come scrissi, l'equipaggiamento ï¿½ complesso e diviso in 9 pezzi + 10 anelli + 3 collane
orecchini	|	testa	|	mantello
mani		|	busto	|	braccia
piedi		|	cintura	|	gambe(pantaloni)
arma primaria	((vuoto))	arma secondaria
originariamente al posto degli orecchini c'erano le spalle .. le incorporo in "braccia", che prima erano "avambracci"
poi una colonna per ciascuna mano, le 3 collane in colonna
aggiungere i braccialetti alle due mani? troppo incasinato, ma ci sta: con le collane si otterrebbe una colonna completa alta 5
magari al posto di "vuoto" metterci un "famiglio"
per ogni mano, se il numero di anelli supera il 2 allora si ha un progressivo malus in agilitï¿½, forza, destrezza, precisione
(tienila te una spada facendo presa con migliaia di anelli)
originariamente ciascun dito poteva tenere 2 anelli (aveva 2 slot) e gli anelli erano divisi in "slot singolo" e "doppio slot"
(un po' come le armi a due mani) e la regola di cui sopra si applicava per un numero di slot superiore a 3.
Si potrebbe implementare, con l'accortezza perï¿½ che gli anelli "singoli" siano piï¿½ deboli dei "doppi".
In tal caso, per calcolare il malus sopra, gli anelli doppi contano come 1.5 per tutto il dito
(mentre due anelli singoli contano come 1 ciascuno, quindi 2), perchï¿½ per essere indossati hanno delle prese ergonomiche.













_______________________________
pre 19/03:
_______________________________


STRUTTURA GENERALE GROSSA


Ogni istanza di GameLauncher ha una istanza di GameGUI e GameController.

Quest'ultima gestisce un ControllerModel, che ne definisce lo "stato" appunto,
il sistema di Input (mouse e tastiera, gamepad, touch, frecce direzionali, etc)
e, soprattutto un insieme di GameModality
(Es:
- PvsIA, 1v1, Multi_VS_Multi, etc
- dungeons, open world, YouVsWawesOfEnemies
- chess like, usual RPG through maps, etc
)