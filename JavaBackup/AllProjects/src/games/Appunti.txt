STRUTTURA GENERALE GROSSA


Ogni istanza di GameLauncher ha una istanza di GameGUI e GameController.

Quest'ultima gestisce un ControllerModel, che ne definisce lo "stato" appunto,
il sistema di Input (mouse e tastiera, gamepad, touch, frecce direzionali, etc)
e, soprattutto un insieme di GameModality
(Es:
- PvsIA, 1v1, Multi_VS_Multi, etc
- dungeons, open world, YouVsWawesOfEnemies
- chess like, usual RPG through maps, etc
)



__________________________________



In ogni GameModality:
static final long MIN_DELTA = 10L;

void runGame(){
	long start, lastDelta;
	while( isAlive() ){
		lastDelta = MIN_DELTA;
		while(isPlaying()){
			start = System.currentTimeMillis();
			doOnEachCycle(lastDelta);
			lastDelta = Math.min(MIN_DELTA, System.currentTimeMillis() - start );
		}
	}
}

/**Designed to be overrided*/
void doOnEachCycle(long millisecToElapse){
	// first, move everybody
	for each MovableObject mo {
		mo.move(lastDelta);
	}
	// then make everyone act
	for each ActiveObject ao {
		ao.act(lastDelta); // fai progredire QUALSIASI cosa: abilità che si ricaricano col tempo, rigenerazioni, movimento di proiettili e cose, etc
	}
	// then, perform each event
	getGameEventManager().manageAll();
}

e mettere a disposizione metodi per aggiungere ActiveObjects e non solo




--------------------------------------------------------------


ActiveObject - TimeProgressingObject - TimeEvolvingObject
interfaccia per definire un qualcosa che modifica il suo stato nel tempo, che progredisce
può definire metodi come "act", "move", etc
può far innescare eventi, come l'essersi mosso (utile per le "trappole a pressione", per controllare le collisioni tra oggetti,
ascoltatori di eventi come "ogniqualvolta entra una creatura in campo, fai XYZ", etc...)

Si consiglia di architettare la GameModality come avente un metodo del tipo "moveObject",
il quale può essere interpretato come un "teleport" (sarà quindi compito dell'oggetto stesso e
non del GameModality [o di un più generico GameObjectsInSpaceManager] tenere traccia del percorso
che sta seguendo, di far muovere passo passo l'oggetto, etc)
(magari moveObject può essere generico, del tipo:
- se non era presente, allora addObject()
- se la destinazione è "null", allora removeObject()
- altrimenti, muovilo: remove(obj, false); add(obj, false); fireEvent(ObjectMoved, obj);
[il booleano è un overload per specificare se bisogna generare un evento associato oppure no]




--------------------------------------------------------------




GameEventManager:
Ogni GameEvent, come vedremo, ha un ID.
Questo Manager ha un insieme di GameEventHandler, plausibilmente suddisi per ciascun GameEvent.
Ciascuna suddivisione, qualora il GameEventManager implementasse effettivamente la suddivisione,
potrebbe essere una coda di priorità:
- "n > 0": alta priorità: esempio, come la "bambola Voodoo" del gioco Castlevenia, "se stai per morire,
allora mi distruggo io e tu rinasci/sopravvivi".
- "h == 0": "importante ma non troppo". Esempio: "se muori tu, io, tua fatina spirituale, muoio con te" o
"questo buff/malus dura fino alla morte"
- "h < 0": low-priority
Questo manager dovrebbe gestire ogni singolo evento come se avvenissero in contemporanea

GameEvent:
interface ObjectWIthID {
	public Integer getID();
}
interface GameEvent extends ObjectWIthID{
	// public String getName(); //needed?
}
enum ExmapleGE implements GameEvent{
	Moved, Destroyed, Spawned, DamageTaken, DamageInflicted, HealReceived, HealGained, PickedUpMoney, PickedUpObject;
	public Integer getID(){
		return ordinal();
	}
}


Per gestire la distruzione, si potrebbe definire un
interface DestructibleObject{
	public boolean isDestroyed();
	public boolean shouldBeDestroyed(); // semplice flag o cosa computata, per esempio verificando se vita<=0
	public void notifyDestruction(GameEventManager gem);
}
così da semplificare ed automatizzarne la gestione.
L'evento "EventObjDestroyed" potrebbe sia avere una referenza all'oggetto che dovrebbe
essere distrutto sia qualche flag del tipo "distructionAvoided, distructionUnavoidable", impostato da qualche handler particolare.
