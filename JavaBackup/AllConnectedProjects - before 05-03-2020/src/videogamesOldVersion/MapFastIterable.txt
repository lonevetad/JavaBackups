package common.mainTools;

import java.io.Serializable;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;

import common.abstractCommon.behaviouralObjectsAC.MyComparator;
import common.mainTools.RedBlackTree.BehaviourOnDuplicate;

/** Behaves as a {@link Set}{@code <K>}, see {@link RedBlackTree} */
public class RBTreeFastIterable<K, V> implements // Iterable<K>, SortedMap<K, V>
		SortedMapIterable<K, V>, Serializable/* , Set<K> */ , Function<K, V> {
	private static final long serialVersionUID = 151061656520L;

	public RBTreeFastIterable(MyComparator<K> comp) {
		rbt = new RedBlackTree<>(comp);
		first = null;
	}

	RedBlackTree<K, NodeMFI<K, V>> rbt;
	NodeMFI<K, V> first;

	//

	//

	@Override
	public int size() {
		return rbt.size();
	}

	@Override
	public boolean isEmpty() {
		return first == null || rbt.isEmpty();
	}

	@Override
	public void clear() {
		rbt.clear();
		first = null;
	}

	@Override
	public V add(K key, V value) {
		NodeMFI<K, V> v, n;
		if (key == null || value == null) return null;
		v = rbt.add(key, n = new NodeMFI<>(this, key, value));
		if (v != null) v.unlink();
		n.onAdding();
		return v.value;
	}

	@Override
	public V delete(K key) {
		NodeMFI<K, V> n;
		if (key == null) return null;
		n = rbt.delete(key);
		if (n == null)
			return null;
		else {
			n.unlink();
			return n.value;
		}
	}

	@Override
	public boolean hasKey(K key) {
		return rbt.hasKey(key);
	}

	@Override
	public V fetch(K key) {
		NodeMFI<K, V> n;
		if (key == null) return null;
		n = rbt.fetch(key);
		return n == null ? null : n.value;
	}

	@Override
	public void forEach(Consumer<? super K> action) {
		NodeMFI<K, V> n;
		if (action == null) return;
		n = first;
		if (n != null) {
			do {
				action.accept(n.key);
			} while ((n = n.next) != null);
		}
	}

	@Override
	public void forEach(BiConsumer<? super K, ? super V> action) {
		NodeMFI<K, V> n;
		if (action == null) return;
		n = first;
		if (n != null) {
			do {
				action.accept(n.key, n.value);
			} while ((n = n.next) != null);
		}
	}

	public MyLinkedList<V> toList() {
		final MyLinkedList<V> l;
		l = new MyLinkedList<>();
		if (!isEmpty()) forEach((k, v) -> l.add(v));
		return l;
	}

	public BehaviourOnDuplicate getBehaviour() {
		return rbt.getBehaviour();
	}

	public MyComparator<K> getComparator() {
		return rbt.getComparator();
	}

	@Override
	public Comparator<? super K> comparator() {
		return rbt.comparator();
	}

	public V getMinimum() {
		NodeMFI<K, V> n;
		n = rbt.getMinimum();
		return n == null ? null : n.value;
	}

	public V extractMinimum() {
		NodeMFI<K, V> n;
		n = rbt.extractMinimum();
		return n == null ? null : n.value;
	}

	public V getMaximum() {
		NodeMFI<K, V> n;
		n = rbt.getMaximum();
		return n == null ? null : n.value;
	}

	public V extractMaximum() {
		NodeMFI<K, V> n;
		n = rbt.extractMaximum();
		return n == null ? null : n.value;
	}

	@Override
	public boolean containsKey(Object key) {
		return rbt.containsKey(key);
	}

	@Override
	public V get(Object key) {
		NodeMFI<K, V> n;
		if (key == null) return null;
		n = rbt.get(key);
		return n == null ? null : n.value;
	}

	@Override
	public V put(K key, V value) {
		return add(key, value);
	}

	@SuppressWarnings("unchecked")
	@Override
	public V remove(Object key) {
		return delete((K) key);
	}

	@Override
	public K firstKey() {
		return rbt.firstKey();
	}

	@Override
	public K lastKey() {
		return rbt.lastKey();
	}

	@Override
	public Collection<V> values() throws UnsupportedOperationException {
		return toList(); // rbt.values();
	}

	public Object[] toArray() {
		return rbt.toArray();
	}

	public Object[] toArray(boolean wantsKey) {
		return rbt.toArray(wantsKey);
	}

	public <T> T[] toArray(T[] a) {
		return rbt.toArray(a);
	}

	public <T> T[] toArray(T[] a, boolean wantsKey) {
		return rbt.toArray(a, wantsKey);
	}

	@Override
	public String toString() {
		return rbt.toString();
	}

	@Override
	public boolean containsValue(Object value) {
		return rbt.containsValue(value);
	}

	@Override
	public void putAll(Map<? extends K, ? extends V> m) {
		m.forEach((k, v) -> {
		});
	}

	@Override
	public Set<K> keySet() {
		return rbt.keySet();
	}

	/**
	 * NOTE: the changes in this set are NOT reflected in the original
	 * {@link RBTreeFastIterable} and vice-versa.<br>
	 * See {@link RedBlackTree#entrySet()}.
	 * <p>
	 * {@inheritDoc}
	 */
	@Override
	public Set<java.util.Map.Entry<K, V>> entrySet() {
		Set<Entry<K, V>> set;
		Comparator<? super K> ck;
		ck = comparator();
		set = new TreeSet<>((e1, e2) -> ck.compare(e1.getKey(), e2.getKey()));
		forEach((k, v) -> set.add(new NodeMFI<>(this, k, v)));
		rbt.entrySet();
		return set;
	}

	@Override
	public Iterator<K> iterator() {
		return new IteratorMFI<K, V>(this.first);
	}

	//

	@Override
	public SortedMap<K, V> subMap(K fromKey, K toKey) {
		// rbt.subMap(fromKey, toKey);
		return null;
	}

	@Override
	public SortedMap<K, V> headMap(K toKey) {
		return null;
	}

	@Override
	public SortedMap<K, V> tailMap(K fromKey) {
		return null;
	}

	//

	// TODO CLASS

	// come un nodo di LinkedList, ma con "unlink"
	public static class NodeMFI<K, V> implements Entry<K, V>, Serializable {
		private static final long serialVersionUID = 65401408L;
		// public MapFastIterable<E, Val> getMapFastIterable();

		// public void setMapFastIterable(MapFastIterable<E, Val> mfi);

		public NodeMFI(RBTreeFastIterable<K, V> mfi, K k, V v) {
			super();
			this.mfi = mfi;
			this.key = k;
			this.value = v;
		}

		RBTreeFastIterable<K, V> mfi;
		K key;
		V value;
		NodeMFI<K, V> prev, next;

		//

		@Override
		public K getKey() {
			return key;
		}

		@Override
		public V getValue() {
			return value;
		}

		@Override
		public V setValue(V value) {
			V v;
			v = this.value;
			this.value = value;
			return v;
		}

		public NodeMFI<K, V> getPrev() {
			return prev;
		}

		public NodeMFI<K, V> getNext() {
			return next;
		}

		public void setPrev(NodeMFI<K, V> prev) {
			this.prev = prev;
		}

		public void setNext(NodeMFI<K, V> next) {
			this.next = next;
		}

		//

		public void unlink() {
			NodeMFI<K, V> p, n;
			// MapFastIterable<K,V>m;
			// m = getMapFastIterable();
			// if (m == null) return;
			p = getPrev();
			n = getNext();
			if (p != null)
				p.setNext(n);
			else
				mfi.first = n;
			if (n != null) n.setPrev(p);
			// else m.last= p;
			setNext(null);
			setPrev(null);
		}

		public void onAdding() {
			// MapFastIterable<K,V>m;
			// m = getMapFastIterable();
			// if (m == null) return;
			unlink();
			setNext(mfi.first);
			if (mfi.first != null) mfi.first.setPrev(this);
			mfi.first = this;
		}
	}

	protected static class IteratorMFI<K, V> implements Iterator<K>, Serializable {
		private static final long serialVersionUID = 65401408L;
		NodeMFI<K, V> n;

		public IteratorMFI(NodeMFI<K, V> n) {
			super();
			this.n = n;
		}

		@Override
		public boolean hasNext() {
			return n != null;
		}

		@Override
		public K next() {
			K k;
			if (n == null) return null;
			k = n.key;
			n = n.next;
			return k;
		}
	}

	public static void main(String[] args) {
		// tests-*
	}

}