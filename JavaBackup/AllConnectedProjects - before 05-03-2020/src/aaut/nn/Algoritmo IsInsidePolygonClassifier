Algoritmo IsInsidePolygonClassifier

enum SideClssific {
	Positive, Negative, Uncertain
}

static class SideInfo{
	int index;
	double coefficAngolare, positivenessCoefficient = {1.0, -1.0};
	SideClssific classification = nullM
	Point p_1. p_2;
	boolean isFirstPointClassifiedWithNextSide = false; //valore che ha senso essere considerato se e solo se positivenessCoefficient è "Positive" o "Negative"
}

private void build(Polygon p){
	// assumendo che abbia almeno 3 vertici / lati

	calcolo tutti i lati del poligono
	creo la matrice 2D assumendo che tutti i lati siano "positivi"
	per ogni lato
		ottengo il suo successivo
		se sono entrambi non ancora classificati (ergo, classification è null per entrambi )
			calcolo il punto "P_1" che è spostato di un pixel lungo la bisettrice dell'angolo minore dei due lati ed il punto "P_2" che è simile ma con direzione opposta
			calcolo se i due punti sono contenuti nel poligono (col metodi cià fatto del "whirl" blabla)
			se i due risultati sono identici (entrambi dentro o entrambi fuori) allora
				c'è un problema e segno i lati come "incerti"
			altrimenti,
				prendo il punto che è considerato come "contenuto"
				assegno il "positivenessCoefficient" di ogni lato in modo tale che i pesi della matrice di tale lato classifichi correttamente tale punto (ossia, se [wbias, wc, wy]T*[1,px,py] < 0 allora positivenessCoefficient = "-1")
				segno tale lato come "Positive" o "Negative"
		altrimenti, se almeno uno è "Positive" o "Negative"
			// in qualche modo, sfrutto la sua classificazione come




	/// nota a parte delle 13:36 .. ciò porebbe essere utile per trovare la prima coppia, perchè esiste sempre una coppia di angoli "ben annotabile" (usualmente sono i lati "più esterni" del poligono, perchè non hanno nessun altro lato che li fa interporre tra essi ed il centro di massa del poligono), e poi annotare tutti i lati successivi in modo circolare fino a che non si giunge ad un lato già annotato (ossia uno dei due trovati per primo)
	// e se non se ne trova nessuno ... allora poligono degenere e fanculo
}





				 classificato come 

"Positive" o "Negative"







COME "propagare" l'etichettamento ad un lato dato un altro già ben etichetttato?

soluzione 1: un lato funge da "contesto di disambiguazione" per l'altro:
	dato che ogni lato (retta) divide il piano in due metà,
	allora il lato successivo o è interamente contenuto nella sezione positiva o quella negativa
	-> il punto estremo di un primo lato (non condiviso col secondo) deve essere classificato dal secondo lato esattamente come il primo classifica l'altro estremo del secondo
l1 -> lato già etichettato
l2 -> lato da etichettare
c2_1 = classificazione dell'altro punto di l2
c1_2 = ssimile ...
if( c2_1 != c1_2 ){
	//sapendo che i pesi sono tutti inizializzati come "positivi
	nuovoSegno = - l1.segno; // l1.segno può anche essere negativo e diventare quindi positivo
	l2.segno = nuovoSegno;
	if(nuovoSegno < 0)
		for(int i=0; i<l2.pesi.length; i++)
			l2.pesi[i] = -l2.pesi[i];
}


row[0] = -row[0];
row[1] = -row[1];
row[2] = -row[2];

//recycle pointWithBiasMatrix for second layer
		pointWithBiasMatrix = new double[][];